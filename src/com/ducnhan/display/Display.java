/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ducnhan.display;

import com.ducnhan.crawldata.CrawlAnnouncement;
import com.ducnhan.crawldata.CrawlScheduleIDOR;
import com.ducnhan.model.Schedule;
import com.ducnhan.java.sync_calender.SyncGgCalender;
import com.ducnhan.model.Announcement;
import com.ducnhan.utils.MyUtils;
import java.awt.Color;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.file.Path;
import java.security.GeneralSecurityException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.JEditorPane;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.RowSorterEvent;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import org.apache.poi.ss.usermodel.BorderStyle;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author DELL
 */
public class Display extends javax.swing.JFrame {

    private List<String> listItems = new ArrayList<>();
    private List<Schedule> listSchedule = new ArrayList<>();
    private List<Announcement> listAnn = new ArrayList<>();
    private boolean setItemFlag = false;
    public static int PROCESS_VALUE = 0;
    DefaultTableCellRenderer renderer;
    DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();

    /**
     * Creates new form display
     */
    public Display() {
        initComponents();
        setLocationRelativeTo(null);
        tblTKB.setRowHeight(30);
        tblTB.setRowHeight(30);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabelNameSv = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblTKB = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTB = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtMaSV = new javax.swing.JTextField();
        btnSyncGg = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jCheckBox1 = new javax.swing.JCheckBox();
        txtReminderTime = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jComboBoxReminderType = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        btnCancelSync = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabelProcessBar = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("QLDT Tool");
        setBackground(new java.awt.Color(47, 93, 195));
        setMinimumSize(null);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(47, 93, 195));
        jPanel1.setPreferredSize(new java.awt.Dimension(1101, 79));

        jLabel4.setFont(new java.awt.Font("Rockwell", 0, 40)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("HNT");

        jLabelNameSv.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelNameSv.setForeground(new java.awt.Color(255, 255, 255));
        jLabelNameSv.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelNameSv.setFocusable(false);
        jLabelNameSv.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelNameSv, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelNameSv, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setPreferredSize(new java.awt.Dimension(1050, 700));

        jTabbedPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTabbedPane1.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N

        tblTKB.setAutoCreateRowSorter(true);
        tblTKB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Thứ", "Ngày", "Mã môn học", "Tên môn học", "Phòng", "Tiết bắt đầu", "Giờ bắt đầu", "Số tiết", "Giảng viên", "Lớp"
            }
        ));
        jScrollPane2.setViewportView(tblTKB);
        if (tblTKB.getColumnModel().getColumnCount() > 0) {
            tblTKB.getColumnModel().getColumn(0).setMinWidth(30);
            tblTKB.getColumnModel().getColumn(0).setPreferredWidth(30);
            tblTKB.getColumnModel().getColumn(0).setMaxWidth(30);
            tblTKB.getColumnModel().getColumn(1).setPreferredWidth(40);
            tblTKB.getColumnModel().getColumn(3).setPreferredWidth(100);
        }

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 696, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Thời khóa biểu", jPanel4);

        tblTB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Ngày", "Url", "Tiêu đề", "Nội dung"
            }
        ));
        tblTB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblTBMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblTB);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 696, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Thông báo", jPanel3);

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setText("Mã sinh viên:");

        txtMaSV.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        txtMaSV.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                txtMaSVMouseExited(evt);
            }
        });
        txtMaSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMaSVActionPerformed(evt);
            }
        });
        txtMaSV.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMaSVKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtMaSVKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMaSVKeyTyped(evt);
            }
        });

        btnSyncGg.setBackground(new java.awt.Color(47, 93, 195));
        btnSyncGg.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        btnSyncGg.setForeground(new java.awt.Color(255, 255, 255));
        btnSyncGg.setText("Đồng bộ");
        btnSyncGg.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSyncGg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSyncGgActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setText("Thông báo :");

        jComboBox1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jComboBox1.setMaximumRowCount(4);
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Chọn tuần hiển thị" }));
        jComboBox1.setToolTipText("");
        jComboBox1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });
        jComboBox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBox1MouseClicked(evt);
            }
        });
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jComboBox1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jComboBox1PropertyChange(evt);
            }
        });

        jCheckBox1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        txtReminderTime.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        txtReminderTime.setText("15");
        txtReminderTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtReminderTimeActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel6.setText("Thông báo trước (phút):");

        jLabel5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel5.setText("Thời khóa biểu:");

        jLabel7.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel7.setText("Kiểu thông báo:");

        jComboBoxReminderType.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jComboBoxReminderType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Popup and Email", "Popup", "Email" }));
        jComboBoxReminderType.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jLabel8.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(47, 93, 195));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("THU THẬP DỮ LIỆU");
        jLabel8.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel9.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(47, 93, 195));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Đồng bộ Google Calender");
        jLabel9.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        btnCancelSync.setBackground(new java.awt.Color(255, 51, 51));
        btnCancelSync.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        btnCancelSync.setForeground(new java.awt.Color(255, 255, 255));
        btnCancelSync.setText("Ngưng đồng bộ");
        btnCancelSync.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCancelSync.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelSyncActionPerformed(evt);
            }
        });

        jProgressBar1.setBackground(new java.awt.Color(0, 255, 0));
        jProgressBar1.setForeground(new java.awt.Color(255, 255, 255));

        jLabel13.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel13.setText("Xuất file :");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Chọn bảng để xuất", "TKB", "TB", "Cả hai" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCancelSync, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator2)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jComboBoxReminderType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtReminderTime, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6))))
                        .addGap(4, 4, 4))
                    .addComponent(btnSyncGg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelProcessBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtMaSV, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jCheckBox1)
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(4, 4, 4)))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtMaSV, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxReminderType, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtReminderTime, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnSyncGg, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCancelSync, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelProcessBar))
        );

        btnCancelSync.setVisible(Boolean.FALSE);
        UIManager.put("ProgressBar.selectionBackground",Color.BLUE);
        UIManager.put("ProgressBar.selectionForeground",Color.WHITE);
        jProgressBar1.setVisible(Boolean.FALSE);

        jLabel3.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(204, 0, 204));
        jLabel3.setText("Sleep now, you will be dreaming. Study now, you will be achieving your dream.");

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));

        jLabel10.setBackground(new java.awt.Color(255, 255, 255));
        jLabel10.setFont(new java.awt.Font("Arial", 2, 11)); // NOI18N
        jLabel10.setText("Mọi thông tin thắc mắc hoặc đóng góp ý kiến hãy liên hệ qua:");

        jLabel11.setIcon(new javax.swing.ImageIcon("D:\\D_Documents\\Nam_4\\LTM\\BTL\\tool_qldt-master\\image\\email.png")); // NOI18N

        jLabel12.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel12.setText("hnt@gmail.com");
        jLabel12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel12MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 752, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jTabbedPane1)
                        .addGap(21, 21, 21)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(37, 37, 37))
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1095, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 1095, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 695, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtReminderTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtReminderTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtReminderTimeActionPerformed

    //crawl thoi khoa bieu
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed

        Thread countThread = new Thread() {
            @Override
            public void run() {
                if (setItemFlag == true) {
                    btnSyncGg.setEnabled(Boolean.FALSE);
                    jComboBox2.setEnabled(Boolean.FALSE);
                    System.out.println(this.getName());
                    System.out.println("Người dùng đổi tuần!");
                    System.out.println("Crawl schedule running...");
                    String strMaSV = txtMaSV.getText();
                    if (strMaSV.isEmpty()) {
                        JOptionPane.showMessageDialog(new Frame(),
                                "Bạn chưa nhập mã sinh viên!",
                                "Error",
                                JOptionPane.ERROR_MESSAGE);
                        return;
                    } else if (!MyUtils.checkMsv(strMaSV)) {
                        JOptionPane.showMessageDialog(new Frame(),
                                "Mã sinh viên không hợp lệ!",
                                "Error",
                                JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    jProgressBar1.setIndeterminate(true);
                    new processBarThread("Crawl dữ liêu... ", 100).start();
                    try {
                        // Crawl Schedule
                        crawlScheduleImpl(strMaSV);
                    } catch (IOException ex) {
                        Logger.getLogger(Display.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    Vector<String> coloumnNames = new Vector<>();
                    for (int i = 0; i < tblTKB.getColumnCount(); i++) {
                        coloumnNames.add(tblTKB.getColumnName(i));
                    }
                    DefaultTableModel tableModel = new DefaultTableModel();
                    tableModel.setColumnIdentifiers(coloumnNames);
                    tblTKB.setModel(tableModel);

                    //------giao dien cho thoi khoa bieu ---------//
                    //căn chỉnh header
                    renderer = (DefaultTableCellRenderer) tblTKB.getTableHeader().getDefaultRenderer();
                    renderer.setHorizontalAlignment(JLabel.CENTER);
                    centerRenderer.setHorizontalAlignment(JLabel.CENTER);

                    // set size cho bang thoi khoa bieu
                    TableColumn column = null;
                    for (int i = 0; i < tblTKB.getColumnCount(); i++) {

                        column = tblTKB.getColumnModel().getColumn(i);
                        if (i == 0 || i == 4) {
                            column.setPreferredWidth(40); //sport column is bigger
                            tblTKB.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
                        } else if (i == 2 || i == 3) {
                            column.setPreferredWidth(70);
                        } else if (i == 5 || i == 7) {
                            column.setPreferredWidth(5);
                            tblTKB.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
                        } else {
                            column.setPreferredWidth(35);
                        }
                    }

                    tblTKB.setRowHeight(30);

                    //------giao dien cho thoi khoa bieu ---------//
                    for (Schedule schedule : listSchedule) {
                        Vector<String> rows = new Vector<>();
                        rows.add(schedule.getDayOfWeek());

                        DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
                        rows.add(dateFormat.format(schedule.getDate()));

                        rows.add(schedule.getSubjectCode());
                        rows.add(schedule.getSubjectName());
                        rows.add(schedule.getRoom());
                        rows.add(String.valueOf(schedule.getLessonStart()));
                        rows.add(schedule.getTimeStart().toString());
                        rows.add(String.valueOf(schedule.getNumOfLesson()));
                        rows.add(schedule.getTeacher());
                        rows.add(schedule.getClassName());
                        tableModel.addRow(rows);
                    }
                    // Sap xep
                    tblTKB.setAutoCreateRowSorter(true);
                    TableRowSorter<TableModel> sorter = new TableRowSorter<>(tblTKB.getModel());
                    tblTKB.setRowSorter(sorter);
                    List<RowSorter.SortKey> sortKeys = new ArrayList<>();
                    int columnIndexToSort = 1;
                    sortKeys.add(new RowSorter.SortKey(columnIndexToSort, SortOrder.ASCENDING));
                    sorter.setSortKeys(sortKeys);
                    sorter.sort();

                    // Thong bao thanh cong
                    System.out.println("=> Crawl Schedule success!");
                    PROCESS_VALUE = 100;
                    btnSyncGg.setEnabled(Boolean.TRUE);
                    jComboBox2.setEnabled(Boolean.TRUE);
                    return;
                }

            }
        };

        countThread.setName("Thread - Crawl Schedule...");
        countThread.start();


    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox1MouseClicked

    }//GEN-LAST:event_jComboBox1MouseClicked

    // dong bo thoi khoa bieu
    private void btnSyncGgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSyncGgActionPerformed

        Thread SyncGgCalenderThread = new Thread() {
            @Override
            public void run() {
                try {
                    jComboBox1.setEnabled(Boolean.FALSE);
                    txtMaSV.setEditable(Boolean.FALSE);

                    //Thực hiện đồng bộ với Google Calender
                    String strMaSV = txtMaSV.getText();
                    if (strMaSV.isEmpty()) {
                        JOptionPane.showMessageDialog(new Frame(),
                                "Bạn chưa nhập mã sinh viên!",
                                "Error",
                                JOptionPane.ERROR_MESSAGE);
                        return;
                    } else if (!MyUtils.checkMsv(strMaSV)) {
                        JOptionPane.showMessageDialog(new Frame(),
                                "Mã sinh viên không hợp lệ!",
                                "Error",
                                JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    SyncGgCalender sgc = new SyncGgCalender(Integer.parseInt(txtReminderTime.getText()), jComboBoxReminderType.getSelectedIndex());
                    if (listSchedule.isEmpty()) {
                        crawlScheduleImpl(strMaSV);
                    } else {
                        System.out.println("List Schedule exist!!!");
                    }
                    new processBarThread("Đồng bộ với Calender... ", listSchedule.size()).start();
                    sgc.syncSchedule(listSchedule, "Lịch học PTIT");

                    jComboBox1.setEnabled(Boolean.TRUE);
                    txtMaSV.setEditable(Boolean.TRUE);
                } catch (IOException | GeneralSecurityException | ParseException ex) {
                    Logger.getLogger(Display.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    jComboBox1.setEnabled(Boolean.TRUE);
                    txtMaSV.setEditable(Boolean.TRUE);
                }
            }
        };
        SyncGgCalenderThread.setName("Thread-SyncGgCalender");
        SyncGgCalenderThread.start();


    }//GEN-LAST:event_btnSyncGgActionPerformed

    private void txtMaSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMaSVActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMaSVActionPerformed

    private void txtMaSVKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMaSVKeyPressed

    }//GEN-LAST:event_txtMaSVKeyPressed

    private void txtMaSVMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtMaSVMouseExited

    }//GEN-LAST:event_txtMaSVMouseExited

    private void txtMaSVKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMaSVKeyReleased
        String strMaSv = txtMaSV.getText();
        if (strMaSv.length() >= 10) {
            setItemFlag = false;
            if (MyUtils.checkMsv(strMaSv)) {
                System.out.println("MSV OKE");
                setListWeekItems();
                System.out.println(txtMaSV.getText());
            } else {
                System.out.println("Tach");
            }
        }
    }//GEN-LAST:event_txtMaSVKeyReleased

    private void btnCancelSyncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelSyncActionPerformed
        try {
            File file = new File("tokens/StoredCredential");
            if (file.delete()) {
                System.out.println(file.getName() + " is deleted!");
            } else {
                System.out.println("Delete operation is failed.");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnCancelSyncActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                // Simulate doing something useful.
                System.out.println("Check Exist Tokens");
                while (true) {
                    File file = new File("tokens/StoredCredential");
                    if (file.isFile()) {
                        btnCancelSync.setVisible(Boolean.TRUE);

                    } else {
                        btnCancelSync.setVisible(Boolean.FALSE);

                    }
                }

            }
        };

        worker.execute();
    }//GEN-LAST:event_formComponentShown

    private void jComboBox1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jComboBox1PropertyChange

    }//GEN-LAST:event_jComboBox1PropertyChange

    private void txtMaSVKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMaSVKeyTyped

    }//GEN-LAST:event_txtMaSVKeyTyped

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    //crawl thong bao
    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        Thread countThread = new Thread() {
            @Override
            public void run() {
                if (setItemFlag == true) {
                    btnSyncGg.setEnabled(Boolean.FALSE);
                    jComboBox2.setEnabled(Boolean.FALSE);
                    System.out.println(this.getName());
                    System.out.println("Crawl announcement running...");

                    String strMaSV = txtMaSV.getText();
                    if (strMaSV.isEmpty()) {
                        JOptionPane.showMessageDialog(new Frame(),
                                "Bạn chưa nhập mã sinh viên!",
                                "Error",
                                JOptionPane.ERROR_MESSAGE);
                        return;
                    } else if (!MyUtils.checkMsv(strMaSV)) {
                        JOptionPane.showMessageDialog(new Frame(),
                                "Mã sinh viên không hợp lệ!",
                                "Error",
                                JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    jProgressBar1.setIndeterminate(true);
                    new processBarThread("Crawl thông báo... ", 100).start();
                    try {
                        // Crawl Announcement
                        crawlAnnouncementImpl();
                    } catch (IOException ex) {
                        Logger.getLogger(Display.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    Vector<String> coloumnNames = new Vector<>();
                    for (int i = 0; i < tblTB.getColumnCount(); i++) {
                        coloumnNames.add(tblTB.getColumnName(i));
                    }
                    DefaultTableModel tableModel = new DefaultTableModel();
                    tableModel.setColumnIdentifiers(coloumnNames);
                    tblTB.setModel(tableModel);

                    //-----------can chinh giao dien ---------//
                    // set size cho bang thong bao
                    TableColumn column = null;
                    for (int i = 0; i < tblTB.getColumnCount(); i++) {
                        column = tblTB.getColumnModel().getColumn(i);
                        if (i == 0) {
                            column.setPreferredWidth(30); //sport column is bigger
                        } else if (i == 1) {
                            column.setPreferredWidth(60);
                        } else {
                            column.setPreferredWidth(200);
                        }
                    }
                    //tblTB.setRowHeight(tblTB.getRowHeight() + 20);
                    tblTKB.setRowHeight(40);
                    //căn chỉnh header
                    renderer = (DefaultTableCellRenderer) tblTB.getTableHeader().getDefaultRenderer();
                    renderer.setHorizontalAlignment(JLabel.CENTER);
                    //căn chỉnh value trong col
                    centerRenderer.setHorizontalAlignment(JLabel.CENTER);
                    for (int x = 0; x < tblTB.getColumnCount(); x++) {
                        tblTB.getColumnModel().getColumn(x).setCellRenderer(centerRenderer);
                    }

                    //-----------can chinh giao dien ---------//
                    // lay du lieu
                    for (Announcement ann : listAnn) {
                        Vector<String> rows = new Vector<>();
                        rows.add(ann.getDateAnn());
                        rows.add(ann.getUrl());
                        rows.add(ann.getTitle());
                        rows.add(ann.getContent());
                        tableModel.addRow(rows);
                    }

                    //Sap xep theo ngay
                    tblTB.setAutoCreateRowSorter(true);
                    TableRowSorter<TableModel> sorter = new TableRowSorter<>(tblTB.getModel());
                    tblTB.setRowSorter(sorter);
                    List<RowSorter.SortKey> sortKeys = new ArrayList<>();
                    int columnIndexToSort = 0;
                    sortKeys.add(new RowSorter.SortKey(columnIndexToSort, SortOrder.ASCENDING));
                    sorter.setSortKeys(sortKeys);
                    sorter.sort();

                    // Thong bao thanh cong
                    System.out.println("=>Crawl Announcement success!");
                    PROCESS_VALUE = 100;
                    btnSyncGg.setEnabled(Boolean.TRUE);
                    jComboBox2.setEnabled(Boolean.TRUE);

                    return;

                }
            }

        };

        countThread.setName("Thread - Crawl Announcement...");
        countThread.start();

    }//GEN-LAST:event_jCheckBox1ActionPerformed

    //hyperlink lien he 
    private void jLabel12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel12MouseClicked

        jLabel12.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {
                try {
                    Desktop.getDesktop().browse(new URI("http://gmail.com"));
                } catch (IOException | URISyntaxException e1) {
                    e1.printStackTrace();
                }
            }

            @Override
            public void mouseExited(MouseEvent e) {
                jLabel12.setText("htn@gmail.com");
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                jLabel12.setText("<html><a href=''>" + "htn@gmail.com" + "</a></html>");
            }

        });
    }//GEN-LAST:event_jLabel12MouseClicked

    //hyperlink thong bao
    private void tblTBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblTBMouseClicked

        int row = tblTB.getSelectedRow();

        TableModel tableModel = tblTB.getModel();
        String url = String.valueOf(tableModel.getValueAt(row, 1).toString());

        try {
            Desktop.getDesktop().browse(new URI(url));
        } catch (IOException | URISyntaxException e1) {
            JOptionPane.showMessageDialog(null, "Đường dẫn không có sẵn");

        }
    }//GEN-LAST:event_tblTBMouseClicked

    //su kien xuat file excel
    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:

        String option = jComboBox2.getSelectedItem().toString();
        if (option.contains("TKB")) {
            try {
                writeToExcel(tblTKB);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "ERROR", "ERROR MESSAGE", JOptionPane.ERROR_MESSAGE);
            }
            System.out.println("Xuat file csv cho thoi khoa bieu");
        } else if (option.contains("TB")) {
            try {
                writeToExcel(tblTB);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "ERROR", "ERROR MESSAGE", JOptionPane.ERROR_MESSAGE);
            }
            System.out.println("Xuat file csv cho thong bao");
        }
        else if (option.contains("Cả hai")){
            try {
                writeToExcel(tblTKB);
                writeToExcel(tblTB);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "ERROR", "ERROR MESSAGE", JOptionPane.ERROR_MESSAGE);
            }
            System.out.println("Xuat 2 file thong bao + tkb");
        }
    }//GEN-LAST:event_jComboBox2ActionPerformed
    
    //xuat ra 1 file csv
    public void exportToCSV(JTable tableToExport) {

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Specify a file save");
        int userSelection = fileChooser.showSaveDialog(this);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            try {
                TableModel model = tableToExport.getModel();
                FileWriter fw = new FileWriter(fileToSave, Charset.forName("UTF-8"));
                BufferedWriter bw = new BufferedWriter(fw);

                for (int i = 0; i < model.getColumnCount(); i++) {
                    bw.write(model.getColumnName(i) + ",");
                }

                bw.newLine();//record per line 
                for (int i = 0; i < model.getRowCount(); i++) {
                    for (int j = 0; j < model.getColumnCount(); j++) {
                        //write
                        bw.write(model.getValueAt(i, j).toString() + ",");
                    }
                    bw.newLine();//record per line 
                }
                JOptionPane.showMessageDialog(this, "Xuất file thành công", "INFORMATION", JOptionPane.INFORMATION_MESSAGE);
                bw.close();
                fw.close();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "ERROR", "ERROR MESSAGE", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    //xuat ra 1 file excel
    private void writeToExcel(JTable table) throws FileNotFoundException, IOException {
        
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Specify a file save");
        int userSelection = fileChooser.showSaveDialog(this);
        
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            new WorkbookFactory() {
            };
            
            Workbook wb = new XSSFWorkbook(); //Excell workbook
            Sheet sheet = wb.createSheet(); //WorkSheet
            // Tao CellStyle cho header
            
            Row row = sheet.createRow(2); //Row created at line 3
            TableModel model = table.getModel(); //Table model

            Row headerRow = sheet.createRow(0); //Create row at line 0
            for (int headings = 0; headings < model.getColumnCount(); headings++) { //For each column
                headerRow.createCell(headings).setCellValue(model.getColumnName(headings));//Write column name
            }

            for (int rows = 0; rows < model.getRowCount(); rows++) { //For each table row
                for (int cols = 0; cols < table.getColumnCount(); cols++) { //For each table column
                    row.createCell(cols).setCellValue(model.getValueAt(rows, cols).toString()); //Write value
                }

                //Set the row to the next one in the sequence 
                row = sheet.createRow((rows + 3));
            }
            wb.write(new FileOutputStream(fileToSave.toString()));//Save the file 
            JOptionPane.showMessageDialog(this, "Xuất file thành công", "INFORMATION", JOptionPane.INFORMATION_MESSAGE);

        }

    }

    private void crawlScheduleImpl(String strMaSv) throws IOException {
        String strWeekSelected = jComboBox1.getSelectedItem().toString();
        CrawlScheduleIDOR crawlDataIDOR = new CrawlScheduleIDOR(strMaSv);
        listSchedule.clear();
        if (strWeekSelected.contains("Toàn bộ")) {
            System.out.println("+ Crawl All Schedule...");
            listSchedule = crawlDataIDOR.getAllSchedules();
        } else if (strWeekSelected.contains("[*]")) {
            System.out.println("+ Crawl Current Schedule...");
            listSchedule = crawlDataIDOR.getSchedulesInCurrentWeek();
        } else {
            System.out.println("+ Crawl Schedule: " + strWeekSelected);
            listSchedule = crawlDataIDOR.getSchedulesInWeek(strWeekSelected);
        }
    }

    //thông báo
    private void crawlAnnouncementImpl() throws IOException {
        CrawlAnnouncement crawlAnn = new CrawlAnnouncement();

        listAnn.clear();
        if (jCheckBox1.isSelected()) {

            System.out.println("+ Crawl Announcement...");
            listAnn = crawlAnn.getAllAnnInPage();
        }
    }

    private void setListWeekItems() {
        System.out.println("Get All Week");
        CrawlScheduleIDOR cdidor;
        String strMaSV = txtMaSV.getText();
        try {
            if (MyUtils.checkMsv(strMaSV)) {
                cdidor = new CrawlScheduleIDOR(strMaSV);
                listItems = cdidor.getAllWeek();
                jLabelNameSv.setText("Xin chào, " + cdidor.getStrName());
                jComboBox1.removeAllItems();
                jComboBox1.addItem("Toàn bộ");
                listItems.forEach(item -> {
                    if (item.equals(cdidor.getWeeckSelected())) {
                        jComboBox1.addItem("[*]" + item);
                        jComboBox1.setSelectedItem("[*]" + item);

                    } else {
                        jComboBox1.addItem(item);
                    }
                });
                setItemFlag = true;
            } else {
                jLabelNameSv.setText("");

            }
        } catch (IOException ex) {
            Logger.getLogger(Display.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Display.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>

        /* Create and Display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Display().setVisible(true);
            }
        });
    }


    class processBarThread extends Thread {

        private int max_value = 0;
        private String strMess;

        public processBarThread(String strMess, int max_value) {
            super();
            this.strMess = strMess;
            this.max_value = max_value;
        }

        @Override
        public void run() {
            jProgressBar1.setVisible(Boolean.TRUE);
            jProgressBar1.setMaximum(max_value);

            jLabelProcessBar.setVisible(Boolean.TRUE);
            jLabelProcessBar.setText(strMess);
            while (true) {
                jProgressBar1.setValue(PROCESS_VALUE);
                jProgressBar1.setStringPainted(Boolean.TRUE);
                if (jProgressBar1.getValue() == max_value) {
                    try {
                        jLabelProcessBar.setText(strMess + "thành công.");
                        Thread.sleep(3000);
                        jLabelProcessBar.setVisible(Boolean.FALSE);
                        jProgressBar1.setVisible(Boolean.FALSE);
                        PROCESS_VALUE = 0;
                        break;
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Display.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelSync;
    private javax.swing.JButton btnSyncGg;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBoxReminderType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelNameSv;
    private javax.swing.JLabel jLabelProcessBar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tblTB;
    private javax.swing.JTable tblTKB;
    private javax.swing.JTextField txtMaSV;
    private javax.swing.JTextField txtReminderTime;
    // End of variables declaration//GEN-END:variables
}
